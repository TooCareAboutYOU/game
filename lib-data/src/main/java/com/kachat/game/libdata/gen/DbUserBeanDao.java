package com.kachat.game.libdata.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.kachat.game.libdata.dbmodel.DbUserBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DB_USER_BEAN".
*/
public class DbUserBeanDao extends AbstractDao<DbUserBean, Long> {

    public static final String TABLENAME = "DB_USER_BEAN";

    /**
     * Properties of entity DbUserBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Token = new Property(1, String.class, "token", false, "TOKEN");
        public final static Property Mobile = new Property(2, String.class, "mobile", false, "MOBILE");
        public final static Property Username = new Property(3, String.class, "username", false, "USERNAME");
        public final static Property Gender = new Property(4, String.class, "gender", false, "GENDER");
        public final static Property Uid = new Property(5, int.class, "uid", false, "UID");
        public final static Property Age = new Property(6, int.class, "age", false, "AGE");
        public final static Property System = new Property(7, int.class, "system", false, "SYSTEM");
        public final static Property Level = new Property(8, int.class, "level", false, "LEVEL");
        public final static Property Hp = new Property(9, int.class, "hp", false, "HP");
        public final static Property Exp_to_level_up = new Property(10, int.class, "exp_to_level_up", false, "EXP_TO_LEVEL_UP");
        public final static Property Exp = new Property(11, int.class, "exp", false, "EXP");
        public final static Property Number = new Property(12, String.class, "number", false, "NUMBER");
        public final static Property Diamond = new Property(13, int.class, "diamond", false, "DIAMOND");
        public final static Property Charm = new Property(14, int.class, "charm", false, "CHARM");
        public final static Property Gold = new Property(15, int.class, "gold", false, "GOLD");
    }


    public DbUserBeanDao(DaoConfig config) {
        super(config);
    }
    
    public DbUserBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DB_USER_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TOKEN\" TEXT," + // 1: token
                "\"MOBILE\" TEXT," + // 2: mobile
                "\"USERNAME\" TEXT," + // 3: username
                "\"GENDER\" TEXT," + // 4: gender
                "\"UID\" INTEGER NOT NULL ," + // 5: uid
                "\"AGE\" INTEGER NOT NULL ," + // 6: age
                "\"SYSTEM\" INTEGER NOT NULL ," + // 7: system
                "\"LEVEL\" INTEGER NOT NULL ," + // 8: level
                "\"HP\" INTEGER NOT NULL ," + // 9: hp
                "\"EXP_TO_LEVEL_UP\" INTEGER NOT NULL ," + // 10: exp_to_level_up
                "\"EXP\" INTEGER NOT NULL ," + // 11: exp
                "\"NUMBER\" TEXT," + // 12: number
                "\"DIAMOND\" INTEGER NOT NULL ," + // 13: diamond
                "\"CHARM\" INTEGER NOT NULL ," + // 14: charm
                "\"GOLD\" INTEGER NOT NULL );"); // 15: gold
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DB_USER_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DbUserBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(2, token);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(3, mobile);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(4, username);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(5, gender);
        }
        stmt.bindLong(6, entity.getUid());
        stmt.bindLong(7, entity.getAge());
        stmt.bindLong(8, entity.getSystem());
        stmt.bindLong(9, entity.getLevel());
        stmt.bindLong(10, entity.getHp());
        stmt.bindLong(11, entity.getExp_to_level_up());
        stmt.bindLong(12, entity.getExp());
 
        String number = entity.getNumber();
        if (number != null) {
            stmt.bindString(13, number);
        }
        stmt.bindLong(14, entity.getDiamond());
        stmt.bindLong(15, entity.getCharm());
        stmt.bindLong(16, entity.getGold());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DbUserBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(2, token);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(3, mobile);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(4, username);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(5, gender);
        }
        stmt.bindLong(6, entity.getUid());
        stmt.bindLong(7, entity.getAge());
        stmt.bindLong(8, entity.getSystem());
        stmt.bindLong(9, entity.getLevel());
        stmt.bindLong(10, entity.getHp());
        stmt.bindLong(11, entity.getExp_to_level_up());
        stmt.bindLong(12, entity.getExp());
 
        String number = entity.getNumber();
        if (number != null) {
            stmt.bindString(13, number);
        }
        stmt.bindLong(14, entity.getDiamond());
        stmt.bindLong(15, entity.getCharm());
        stmt.bindLong(16, entity.getGold());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DbUserBean readEntity(Cursor cursor, int offset) {
        DbUserBean entity = new DbUserBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // token
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // mobile
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // username
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // gender
            cursor.getInt(offset + 5), // uid
            cursor.getInt(offset + 6), // age
            cursor.getInt(offset + 7), // system
            cursor.getInt(offset + 8), // level
            cursor.getInt(offset + 9), // hp
            cursor.getInt(offset + 10), // exp_to_level_up
            cursor.getInt(offset + 11), // exp
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // number
            cursor.getInt(offset + 13), // diamond
            cursor.getInt(offset + 14), // charm
            cursor.getInt(offset + 15) // gold
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DbUserBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setToken(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMobile(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUsername(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGender(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUid(cursor.getInt(offset + 5));
        entity.setAge(cursor.getInt(offset + 6));
        entity.setSystem(cursor.getInt(offset + 7));
        entity.setLevel(cursor.getInt(offset + 8));
        entity.setHp(cursor.getInt(offset + 9));
        entity.setExp_to_level_up(cursor.getInt(offset + 10));
        entity.setExp(cursor.getInt(offset + 11));
        entity.setNumber(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setDiamond(cursor.getInt(offset + 13));
        entity.setCharm(cursor.getInt(offset + 14));
        entity.setGold(cursor.getInt(offset + 15));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DbUserBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DbUserBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DbUserBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
