package com.kachat.game.libdata.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import java.util.List;

import com.kachat.game.libdata.dbmodel.DbLive2DBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DB_LIVE2_DBEAN".
*/
public class DbLive2DBeanDao extends AbstractDao<DbLive2DBean, Long> {

    public static final String TABLENAME = "DB_LIVE2_DBEAN";

    /**
     * Properties of entity DbLive2DBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property LiveFilePath = new Property(1, String.class, "liveFilePath", false, "LIVE_FILE_PATH");
        public final static Property LiveFileName = new Property(2, String.class, "liveFileName", false, "LIVE_FILE_NAME");
        public final static Property BgFilePath = new Property(3, String.class, "bgFilePath", false, "BG_FILE_PATH");
        public final static Property BgFileName = new Property(4, String.class, "bgFileName", false, "BG_FILE_NAME");
        public final static Property ChatMask = new Property(5, String.class, "chatMask", false, "CHAT_MASK");
        public final static Property GameMask = new Property(6, String.class, "gameMask", false, "GAME_MASK");
        public final static Property PitchLevel = new Property(7, int.class, "pitchLevel", false, "PITCH_LEVEL");
    }

    private final FloatConverter chatMaskConverter = new FloatConverter();
    private final FloatConverter gameMaskConverter = new FloatConverter();

    public DbLive2DBeanDao(DaoConfig config) {
        super(config);
    }
    
    public DbLive2DBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DB_LIVE2_DBEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"LIVE_FILE_PATH\" TEXT," + // 1: liveFilePath
                "\"LIVE_FILE_NAME\" TEXT NOT NULL ," + // 2: liveFileName
                "\"BG_FILE_PATH\" TEXT," + // 3: bgFilePath
                "\"BG_FILE_NAME\" TEXT NOT NULL ," + // 4: bgFileName
                "\"CHAT_MASK\" TEXT," + // 5: chatMask
                "\"GAME_MASK\" TEXT," + // 6: gameMask
                "\"PITCH_LEVEL\" INTEGER NOT NULL );"); // 7: pitchLevel
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DB_LIVE2_DBEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DbLive2DBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String liveFilePath = entity.getLiveFilePath();
        if (liveFilePath != null) {
            stmt.bindString(2, liveFilePath);
        }
        stmt.bindString(3, entity.getLiveFileName());
 
        String bgFilePath = entity.getBgFilePath();
        if (bgFilePath != null) {
            stmt.bindString(4, bgFilePath);
        }
        stmt.bindString(5, entity.getBgFileName());
 
        List chatMask = entity.getChatMask();
        if (chatMask != null) {
            stmt.bindString(6, chatMaskConverter.convertToDatabaseValue(chatMask));
        }
 
        List gameMask = entity.getGameMask();
        if (gameMask != null) {
            stmt.bindString(7, gameMaskConverter.convertToDatabaseValue(gameMask));
        }
        stmt.bindLong(8, entity.getPitchLevel());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DbLive2DBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String liveFilePath = entity.getLiveFilePath();
        if (liveFilePath != null) {
            stmt.bindString(2, liveFilePath);
        }
        stmt.bindString(3, entity.getLiveFileName());
 
        String bgFilePath = entity.getBgFilePath();
        if (bgFilePath != null) {
            stmt.bindString(4, bgFilePath);
        }
        stmt.bindString(5, entity.getBgFileName());
 
        List chatMask = entity.getChatMask();
        if (chatMask != null) {
            stmt.bindString(6, chatMaskConverter.convertToDatabaseValue(chatMask));
        }
 
        List gameMask = entity.getGameMask();
        if (gameMask != null) {
            stmt.bindString(7, gameMaskConverter.convertToDatabaseValue(gameMask));
        }
        stmt.bindLong(8, entity.getPitchLevel());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DbLive2DBean readEntity(Cursor cursor, int offset) {
        DbLive2DBean entity = new DbLive2DBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // liveFilePath
            cursor.getString(offset + 2), // liveFileName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // bgFilePath
            cursor.getString(offset + 4), // bgFileName
            cursor.isNull(offset + 5) ? null : chatMaskConverter.convertToEntityProperty(cursor.getString(offset + 5)), // chatMask
            cursor.isNull(offset + 6) ? null : gameMaskConverter.convertToEntityProperty(cursor.getString(offset + 6)), // gameMask
            cursor.getInt(offset + 7) // pitchLevel
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DbLive2DBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLiveFilePath(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLiveFileName(cursor.getString(offset + 2));
        entity.setBgFilePath(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBgFileName(cursor.getString(offset + 4));
        entity.setChatMask(cursor.isNull(offset + 5) ? null : chatMaskConverter.convertToEntityProperty(cursor.getString(offset + 5)));
        entity.setGameMask(cursor.isNull(offset + 6) ? null : gameMaskConverter.convertToEntityProperty(cursor.getString(offset + 6)));
        entity.setPitchLevel(cursor.getInt(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DbLive2DBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DbLive2DBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DbLive2DBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
